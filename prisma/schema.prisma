generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model member {
  member_id     String     @id @db.VarChar(255)
  created_date  DateTime?  @db.DateTime(6)
  modified_date DateTime?  @db.DateTime(6)
  gender        Int?       @default(0)
  password      String?    @db.VarChar(255)
  role          Int?       @default(0)
  profile       profile?
  proposals     proposal[]
}

model profile {
  entertainer_id String @id @db.VarChar(255)
  name           String
  platforms      Json
  age            Int
  height         Int
  weight         Int
  keywords       Json
  description    String
  images         Json
  videos         Json?
  career         Json?
  entertainer    member @relation(fields: [entertainer_id], references: [member_id], onDelete: Cascade)
}

model proposal {
  id               BigInt  @id @default(autoincrement())
  scouter_id       String  @db.VarChar(255)
  company          String
  title            String
  platforms        Json
  age_condition    Int?
  gender_condition Json
  keywords         Json
  description      String
  image            String?
  scouter          member  @relation(fields: [scouter_id], references: [member_id], onDelete: Cascade)
  matches matches[]
  @@index([scouter_id], map: "proposal_scouter_id_fkey")
}

model chat_room {
  id          BigInt  @id @default(autoincrement())
  room_id     String  @unique(map: "UK_1ihl4vy13xen0dgc5q4i419j0") @db.VarChar(255)
  receiver_id String? @db.VarChar(255)
  sender_id   String? @db.VarChar(255)
}

model matches {
  id             BigInt  @id @default(autoincrement())
  matched        Boolean @db.Bit(1)
  entertainer_id String? @db.VarChar(255)
  scouter_id     String? @db.VarChar(255)
  proposal_id    BigInt
  proposal       proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model refresh_token {
  refresh       BigInt @id @default(autoincrement())
  email         String @db.VarChar(255)
  refresh_token String @db.VarChar(255)
}
