generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model member {
  member_id     String     @id @db.VarChar(255)
  created_date  DateTime?  @db.DateTime(6)
  modified_date DateTime?  @db.DateTime(6)
  gender        Int?       @default(0)
  password      String?    @db.VarChar(255)
  role          Int?       @default(0)
  profile       profile?
  proposals     proposal[]
}

model profile {
  entertainer_id String @id @db.VarChar(255)
  name           String
  platforms      Json
  age            Int
  height         Int
  weight         Int
  keywords       Json
  description    String
  images         Json
  videos         Json?
  career         Json?
  entertainer    member @relation(fields: [entertainer_id], references: [member_id], onDelete: Cascade)
}

model proposal {
  id               Int       @id @default(autoincrement())
  age_condition    Json?
  company          String?   @db.VarChar(255)
  description      String?   @db.VarChar(255)
  end_date         DateTime? @db.DateTime(6)
  gender_condition Json?
  image            String?   @db.VarChar(255)
  keywords         Json?
  platforms        Json?
  title            String?   @db.VarChar(255)
  scouter_id       String?   @db.VarChar(255)
  matches          matches[]
  scouter          member?   @relation(fields: [scouter_id], references: [member_id], onDelete: NoAction, onUpdate: NoAction, map: "FK3kxambxyb0godv3tcw7tcclqy")

  @@index([scouter_id], map: "FK3kxambxyb0godv3tcw7tcclqy")
}

model chat_room {
  id             BigInt       @id @default(autoincrement())
  created_date   DateTime?    @db.DateTime(6)
  modified_date  DateTime?    @db.DateTime(6)
  room_id        String       @unique(map: "UK_1ihl4vy13xen0dgc5q4i419j0") @db.VarChar(255)
  entertainer_id String?      @db.VarChar(255)
  scouter_id     String?      @db.VarChar(255)
  chat_table     chat_table[]
}

model matches {
  id             BigInt    @id @default(autoincrement())
  matched        Boolean   @default(false)
  entertainer_id String?   @db.VarChar(255)
  proposal_id    Int?
  proposal       proposal? @relation(fields: [proposal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKf5preb69kce0h9r6v4n41cd88")

  @@index([proposal_id], map: "FKf5preb69kce0h9r6v4n41cd88")
}

model refresh_token {
  refresh       BigInt @id @default(autoincrement())
  email         String @db.VarChar(255)
  refresh_token String @db.VarChar(255)
}

model chat_table {
  id           BigInt    @id @default(autoincrement())
  message      String    @db.VarChar(255)
  sending_time DateTime? @db.DateTime(6)
  room_id      BigInt
  receiver_id  String?   @db.VarChar(255)
  sender_id    String?   @db.VarChar(255)
  chat_room    chat_room @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKsjsw58wd0xoyg9rmh096wg72h")

  @@index([room_id], map: "FKsjsw58wd0xoyg9rmh096wg72h")
}
